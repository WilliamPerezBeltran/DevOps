¿Qué es Docker?
Docker es una plataforma de código abierto que automatiza el despliegue de aplicaciones dentro de contenedores. Un contenedor es una unidad ligera y portátil que incluye todo lo necesario para ejecutar una aplicación, como el código, las bibliotecas y las dependencias. Docker facilita la creación, distribución y ejecución de aplicaciones en entornos consistentes y aislados. Esto mejora la eficiencia del desarrollo y la implementación, ya que las aplicaciones empacadas en contenedores pueden ejecutarse de manera consistente en cualquier entorno que admita Docker.

¿Qué es un contenedor?
Un contenedor es una unidad ligera y portátil que incluye todo lo necesario para ejecutar una aplicación, haciéndola consistente y fácil de mover entre diferentes entornos. Son eficientes en recursos y proporcionan aislamiento para evitar conflictos entre aplicaciones

Máquinas Virtuales (VM):
Aislamiento: Las VMs proporcionan un aislamiento completo, ya que ejecutan un sistema operativo completo independiente del host.
Recurso Intensivo: Las VMs pueden consumir más recursos, porque cada una tiene su propio sistema operativo y una cantidad significativa de recursos dedicados.
Arranque Más Lento: El arranque de una VM es más lento, puesto que implica iniciar un sistema operativo completo.
Hypervisor: Las VMs se ejecutan en un hipervisor, que gestiona y asigna recursos para cada máquina virtual.

Contenedores:
Aislamiento Ligero: Los contenedores comparten el mismo kernel del sistema operativo del host, lo que proporciona un aislamiento más ligero.
Eficiencia de Recursos: Los contenedores son más eficientes en términos de recursos, ya que comparten el mismo sistema operativo y solo incluyen las bibliotecas y dependencias necesarias.
Arranque Rápido: Los contenedores tienen un arranque rápido, por el hecho de que no requieren iniciar un sistema operativo completo.
Docker, Containerd, etc.: Docker es una de las tecnologías de contenedores más populares, y otras implementaciones incluyen containerd, rkt, etc.

Comandos para imagenes

Construir una imagen a partir de un archivo Dockerfile:
- docker build -t <nombre_de_imagen>

Construir una imagen desde un archivo Dockerfile sin la caché:
- docker build -t <nombre_de_imagen> . -no-cache

Listar imágenes locales:
- docker images

Eliminar una imagen:
- docker rmi <nombre_imagen>

Eliminar todas las imágenes no utilizadas:
- docker image prune

Comandos para contenedores

Crea y ejecuta un contenedor a partir de una imagen, con un nombre personalizado:
- docker run --name <nombre_contenedor> <nombre_imagen>

Ejecutar un contenedor con y publicar un puerto(s) del contenedor al host:
- docker run -p <puerto_host>:<puerto_contenedor> <nombre_imagen>

Ejecutar un contenedor en segundo plano:
- docker run -d <nombre_imagen>

Iniciar o detener un contenedor existente:
- docker start|stop <nombre_del_contenedor> (o <id_del_contenedor>)

Eliminar un contenedor detenido:
- docker rm <nombre_del_contenedor>

Abrir un shell dentro de un contenedor en ejecución:
- docker exec -it <nombre_del_contenedor> sh

Obtener y seguir los logs de un contenedor:
- docker logs -f <nombre_contenedor>

Inspeccionar un contenedor en ejecución:
- docker inspect <nombre_del_contenedor> (o <id_del_contenedor>)

Para listar los contenedores actualmente en ejecución:
- docker ps

Listar todos los contenedores docker (en ejecución y parados):
- docker ps --all

Ver las estadísticas de uso de recursos:
- docker container stats

Referencia: https://docs.docker.com/get-started/docker_cheatsheet.pdf

=================

Para crear una imagen de Docker para una aplicación en Node.js, puedes seguir un proceso similar al que se describió en la clase sobre Nginx.

Dockerfile: Crea un archivo llamado Dockerfile en la raíz de tu proyecto Node.js.

Base de imagen: Usa una imagen base de Node.js:


FROM node:latest
Directorio de trabajo: Define un directorio de trabajo en el contenedor:


WORKDIR /usr/src/app
Copiar archivos: Copia el archivo de configuración del paquete y tus archivos de aplicación al contenedor:


COPY package*.json ./
COPY . .
Instalar dependencias: Instala las dependencias necesarias:


RUN npm install
Exponer el puerto: Expón el puerto que tu aplicación usa, por ejemplo, el 3000:


EXPOSE 3000
Comando para iniciar la aplicación: Finalmente, especifica el comando para iniciar tu aplicación:


CMD ["node", "app.js"]
Con esto, puedes construir tu imagen usando el comando docker build -t tu-nombre-de-imagen . y luego correrla con docker run -p 3000:3000 tu-nombre-de-imagen.

=================


Las imágenes Docker son un paquete ejecutable ligero e independiente de software que incluye todo lo necesario para ejecutar una aplicación: 
código, tiempo de ejecución, herramientas del sistema, bibliotecas del sistema y configuraciones.


Para correr un contenedor desde la terminal usamos el siguiente comando:

docker run -it --rm -d -p 8080:80 --name web sitioweb
- -it: En forma interactiva para ver los logs

- --rm: elimina las versiones anteriores del contenedor

- -d: el contenedor se ejecuta en un segundo plano

- -p: mapea el puerto del contenedor con el puerto de la aplicación para exponerla

- --name: nombre del contenedor

- Finalmente agregar el nombre de la imagen





































